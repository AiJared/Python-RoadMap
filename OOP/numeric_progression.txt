CLASS Progression
	"""Iterator producing a generic progression.
	Default iterator produces the whole numbers 0, 1, 2,
	"""

	PROCESS __init__ with self and start is assigned 0
		"""Initialize current to the first value of the progression"""
		ASSIGN start to self._current

	PROCESS _advance with self
		"""Update self._current to a new value.

		This should be overridden by a subclass to customize progression.

		By convention, if current is set to None, this designates the 
		end of a finite progression.
		"""
		INCREASE self._current by 1

	PROCESS __nest__ with self
		"""Return the next element, or else raise StopIteration error."""
		IF self._current is None # our convention to end a progression
			RAISE StopIteration
		ELSE
			ASSIGN self._current to answer # record current value to return
			CALL  self._adance # advance to prepare for next time
			RETURN  answer # return the answer

	PROCESS __iter__ with self
		""" By convention, an iterator must return itself as an iterator"""
		RETURN self

	PROCESS print_progression with self and n
		"""Print next n values of the progression."""
		PRINT (' '. join(string form of (next(self)) FOR j IN range of (n)))

CLASS ArithmeticProgression (Inherit from Progression) # inherit from Progression
	"""Iterator producing an arithmetic progression."""

	PROCESS __init__ with self, increment = 1 and start = 0
		"""
		Creates a new arithmetic progression.

		increment the fixed constant to add to each term (default 1)
		start     the first term of the progression(default 0)
		"""

		CALL super().__init__ with start # initialize the base class
		ASSIGN increment to self._increment

	PROCESS _advance with self # override the inherited version
		"""Update current value by adding the fixed increment"""
		
		INCREASE self._current with self._increment

CLASS GeometricProgression(Inherit from Progression) # inherit from progression
	"""Iterator producing a geometric progression."""
	
	PROCESS __init__ with self, base=2 and start=1
		"""Creates a new geometric progression
		base	the fixed constant multiplied to each term (default 2)
		start	the first term of the progression (default 1)
		"""

		super().__init__ with start
		ASSIGN base to self._base

	PROCESS _advance with self
		"""Update current value by multiplying it by the base value."""

		MULTIPLY self._current by self._base