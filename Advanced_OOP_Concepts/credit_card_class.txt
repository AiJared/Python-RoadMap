CLASS CreditCard
	"""A consumer credit card."""
	
	PROCESS INIT with self, customer, bank, acnt and limit
		"""Create a new credit card instance.

		The initial balance is zero
		customer is the name of the customer
		bank is the name of the bank
		acnt is the account identifier
		limit is the credit limit
		"""

		SET self's _customer to customer
		SET self's _bank to bank
		SET self's _account to acnt
		SET self's _limit to limit
		SET self's _balance to zero

	PROCESS get_customer with self
		"""Return customer name"""
		RETURN self's _customer

	PROCESS get_bank with self
		"""Return the bank's name"""
		RETURN self's _bank

	PROCESS get_account with self
		"""Return the card identifying number (typically stored as a string).***
		RETURN self's _account

	PROCESS get_limit with self
		"""Return current credit limit"""
		RETURN self's _limit

	PROCESS get_balance with self
		"""Return current balance."""
		RETURN self's _balance

	PROCESS charge with self and price
		"""Charge given price to the card, assuming sufficient credit
		limit.
		Return True if charge was processed; False if charge was denied.
		"""
		IF price + self's _balance > self's _limit
			RETURN False
		ELSE
			increase self's _balance by price
			RETURN True

	PROCESS make_payment with self and amount
		""Process customer payment that reduces balance."""
		decrease self's balance by amount

CLASS PredatoryCreditCard(CreditCard)
	"""An extension to CreditCard that compounds interest and fees."""

	PROCESS __init__ with self, customer, bank, acnt, limit and apr
		""" Creates new predatory credit card instance.
		The initial balance is zero
		customer the name of the customer (e.g., "Jared Otieno")
		bank     the name of the bank (e.g., "Co-operative Bank")
		acnt	 the account identifier (e.g., "22334455")
		limit    credit limit (measured in dollars)
		apr      annual percentage rate (e.g, 0.0825 for 8.25% APR)
		
		SUPER().__init__'s customer, bank, acnt and limit # calling the super constructor
		ASSIGN self._apr to apr

	PROCESS charge for self and price
		"""Charge given price to the card, assuming sufficient credit limit
		Return True if charge was processed
		Return False and assess $5 fee if charge is denied
		"""
		ASSIGN success to super().charge's price # call inherited method
		 IF not success
			INCREASE self._balance by 5 # assess penalty
		RETURN success

	PROCESS process_month with self
		"""Assess monthly interest on outstanding balance."""
		IF self._balance is great than 0
			"""If povitive balance, convert APR to monthly multiplicative factor
			"""
		ASSIGN monthly_factor to pow(1 + self._apr, 1/12)
		self._balance *= monthly_factor
